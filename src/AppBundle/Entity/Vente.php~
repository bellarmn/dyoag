<?php

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

/**
 * Vente
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="AppBundle\Entity\VenteRepository")
 * @ORM\HasLifecycleCallbacks()
 * @Vich\Uploadable
 */
class Vente {

    /**
     * @var int
     *
     * @ORM\Column(type="guid")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="UUID")
     */
    private $id;

    /**
     * @var lieu Lieu ou se trouve le produit.
     *
     * @ORM\Column(type="string")
     */
    private $lieu;

    /**
     * @var dateCreation la date de creation de l 'offre.
     *
     *
     * @ORM\Column(type="datetime")
     */
    private $dateCreation;

    /**
     * @var quantite
     *
     *
     * @ORM\Column(type="integer")
     */
    private $quantite;

    /**
     * @var dateLimit date limite de l'offre
     *
     * @ORM\Column(type="datetime")
     */
    private $dateLimit;

    /**
     * @var prixUnit prix unitaire
     *
     *
     * @ORM\Column(type="integer")
     */
    private $prixUnit;

    /**
     * @var description detail complementaire
     *
     *
     * @ORM\Column(type="text")
     */
    private $description;

    /**
     * @var public boolean. offre published
     * @ORM\Column(type="boolean", options={"default" : false})
     */
    private $published = false;

    /**
     * @var Product
     * @ORM\OneToOne(targetEntity="AppBundle\Entity\Product", cascade={"persist"})
     */

    /**
     * @ORM\ManyToOne(targetEntity="Product", inversedBy="ventes")
     * @ORM\JoinColumn(name="product_id", referencedColumnName="id", nullable=false)
     */
    private $product;

    /**
     * @ORM\OneToMany(targetEntity="Order", mappedBy="vente", cascade={"persist"})
     */
    private $orders;

    /**
     * @var User\User
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\User\User", inversedBy="ventes")
     */
    private $user;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\District")
     * @ORM\JoinColumn(name="district_id", referencedColumnName="id")
     * @Assert\Type("AppBundle\Entity\District")
     * @Assert\NotNull()
     */
    protected $district;

    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     *
     * @Vich\UploadableField(mapping="product_image", fileNameProperty="imageName")
     *
     * @var File
     */
    private $imageFile;

    /**
     * @ORM\Column(type="string", length=255, nullable = true)
     *
     * @var string
     */
    private $imageName;

    /**
     * Date de modifcation de l'offre
     *
     * @ORM\Column(type="datetime")
     *
     * @var \DateTime
     */
    private $updatedAt;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $image
     *
     * @return Product
     */
    public function setImageFile(File $image = null) {
        $this->imageFile = $image;

        if ($image) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTime('now');
        }

        return $this;
    }

    /**
     * @return File
     */
    public function getImageFile() {
        return $this->imageFile;
    }

    /**
     * @param string $imageName
     *
     * @return Product
     */
    public function setImageName($imageName) {
        $this->imageName = $imageName;

        return $this;
    }

    /**
     * @return string
     */
    public function getImageName() {
        return $this->imageName;
    }

    public function __construct() {
        $this->orders = new ArrayCollection();
    }

    /**
     * Set dateLimit
     * Chaque offre a 30 jours de visibilitÃ©
     * @ORM\PrePersist
     */
    public function setDateLimit() {
        $this->dateLimit = new \DateTime();
        $this->dateLimit->add(new \DateInterval('P30D'));
    }

    /**
     * Get dateLimit
     *
     * @return \DateTime
     */
    public function getDateLimit() {
        return $this->dateLimit;
    }

    /**
     * Set createdAt
     * *
     * @ORM\PrePersist
     */
    public function setDateCreation() {
        $this->dateCreation = new \DateTime();
    }

    /**
     * Get dateCreation
     *
     * @return \DateTime
     */
    public function getDateCreation() {
        return $this->dateCreation;
    }

    /**
     * Set updatedAt
     *
     * @ORM\PreUpdate
     */
    public function setUpdatedAt() {
        $this->updatedAt = new \DateTime();
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt() {
        return $this->updatedAt;
    }

    /**
     * Set district
     *
     * @param \AppBundle\Entity\District $district
     *
     * @return Vente
     */
    public function setDistrict(\AppBundle\Entity\District $district = null) {
        $this->district = $district;

        return $this;
    }

    /**
     * Get district
     *
     * @return \AppBundle\Entity\District
     */
    public function getDistrict() {
        return $this->district;
    }

    static public function getLuceneIndex() {
        if (file_exists($index = self::getLuceneIndexFile())) {
            return \Zend_Search_Lucene::open($index);
        }

        return \Zend_Search_Lucene::create($index);
    }

    static public function getLuceneIndexFile() {
        return __DIR__ . '/../../../web/data/vente.index';
    }

    /**
     * Set createdAt
     * *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     */
    public function updateLuceneIndex() {
        $index = self::getLuceneIndex();

        // remove existing entries
        foreach ($index->find('pk:' . $this->getId()) as $hit) {
            $index->delete($hit->id);
        }

        // don't index expired and non-activated jobs
//        if ($this->isExpired() || !$this->getIsActivated())
//        {
//          return;
//        }

        $doc = new \Zend_Search_Lucene_Document();

        // store job primary key to identify it in the search results
        $doc->addField(\Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));

        // index job fields
        $doc->addField(\Zend_Search_Lucene_Field::UnStored('product', $this->getProduct(), 'utf-8'));
        $doc->addField(\Zend_Search_Lucene_Field::UnStored('lieu', $this->getLieu(), 'utf-8'));

        // add job to the index
        $index->addDocument($doc);
        $index->commit();
    }

    /**
     * Set createdAt
     * *
     * @ORM\PostRemove
     */
    public function deleteLuceneIndex() {
        $index = self::getLuceneIndex();

        foreach ($index->find('pk:' . $this->getId()) as $hit) {
            $index->delete($hit->id);
        }
    }

}
